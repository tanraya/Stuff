title: "Цепочки вызовов функций (Chains) в MooTools 1.2"

<body>
<img class="size-full wp-image-120" style="float: left; margin-right: 15px;" src="http://torqueo.net/wp-content/uploads/2009/05/210825921946xxbg.jpg" alt="" width="250" height="188" align="left">Это руководство покажет, насколько мощными могут быть цепочки вызовов функций в <a href="http://mootools.net">Mootools</a>. Цепочки облегчают последовательное выполнение стека функций.

Я размещу несколько таких коротких руководств в предстоящие недели. Каждое такое руководство будет нацелено на решение небольшой проблемы с помощью Mootools - это хороший путь для изучения возможностей фреймворка.


~

<h3>Немного о цепочках</h3>
Цепочки очень мощный механизм, он похож на <em>Effect.Queue</em> в Script.aculo.us, но его возможности в Mootools более широки. Цель этого краткого руководства состоит в том, чтобы показать вам, как использовать цепочки Mootools в условиях массового обслуживания эффектов в сочетании с другими произвольными действиями. Но так же вы увидите, что вы можете использовать цепочки и для решения других задач.

Из документации к Mootools 1.2:
<blockquote>Chain - специальный класс, который выполняет функции, одну за другой, причем каждая функция запускается только после завершения предыдущей. Его методы могут быть реализованы в любом классе при помощи указания Implements: Chain и, в настоящее время, эти методы реализованы в стандартных классах Fx и Request. Например, в классе Fx цепочки используются для создания сложной анимации.</blockquote>
Класс Chain может быть использован в качестве отдельного класса, но становится гораздо более мощным, если реализовать его интерфейс в собственных классах.

В этом руководстве я буду создавать класс, который реализует интерфейс класса Chain.

Класс Chain относится к компоненту Class.Extras, поэтому вам нужно убедиться, что вы отметите его и все его зависимости при скачивании собственной сборки Mootools.
<h3>Реализация интерфейса Chain</h3>
Прежде всего, нам нужно добавить методы и свойства класса Chain в наш класс:
<div class="gist-wrapper"><script src="https://gist.github.com/1768628.js?file=gistfile1.js"></script></div>
Теперь класс ChainExample будет содержать следующие методы:
<ul>
<li>
<strong>Chain::chain()</strong> - Добавление любого количества функций в конец стека.</li>
	<li>
<strong>Chain::callChain()</strong> - Получить функцию с вершины стека и вызвать её.</li>
	<li>
<strong>Chain::clearChain()</strong> - Очистить стек.</li>
</ul>
<h3>Использование Chain для выполнения действий в заданном порядке</h3>
Мы реализовали интерфейс класса Chain в нашем классе ChainExample и готовы к использованию функциональности, которую он представляет.

Класс ChainExample добавит события к трём кнопкам. Когда кнопка будет нажата - появится соответствующая ей панель. Прежде, чем это произойдёт, все другие панели будут плавно исчезать. Здесь мы используем цепочки функций для того, чтобы задать нужный нам порядок действий.

Теперь код класса ChainExample будет таким:
<div class="gist-wrapper"><script src="https://gist.github.com/1768629.js?file=gistfile1.js"></script></div>
Я опишу в деталях только код, имеющий отношение к цепочкам. Давайте посмотрим на каждую важную часть кода:
<h4>ChainExample::initialize</h4>
В конструкторе мы устанавливаем события на кнопки и создаем объекты эффектов (Fx) для панелей. Обратите внимание на onComplete. В нём мы получаем функцию из стека и запускаем её ( this.callChain() ) сразу после того, как эффект закончился.
<h4>ChainExample::hideAll</h4>
Внимательно посмотрите на этот метод. Вызов ChainExample::hideAll() на самом деле не скрывает панели. Метод добавляет в стек цепочек набор функций, которые будут скрывать и показывать панели в нужном порядке. Чтобы скрыть панели, мы должны запустить стек цепочек, используя метод this.callChain().

Заметьте, как вторая функция, переданная в стек, вызывает метод this.callChain(). Эта функция сообщает цепочке запускает слудующую функцию в цепочке.

Еще одна важная вещь, которую стоит отметить - функции внутри цепочки связываются между собой в том порядке, в котором они указаны в коде, так что у нас нет необходимости как-то явно связывать их между собой.
<h4>ChainExample::showPanel</h4>
Эта функция привязана к кнопке, при нажатии на которую должна появляться панель.

Сначала производится вызов ChainExample::hideAll(), но не производит какие-либо действия немедленно - панели скрываются только непосредственно после запуска this.callChain().

На данном этапе мы сделали всё необходимое, чтобы скрыть все панели по цепочке. Далее идет код, который занимается показом нужной панели.

После того, как мы добавили необходимые функции в цепочку, выполняется метод this.callChain() и далее, вся цепочка выполняется последовательно, благодаря тому, что в каждом звене цепочки задан собственный вызов this.callChain().

Мы создали класс, который позволяет объединить любое количество эффектов и произвольных функций и обеспечивает их выполнение в том порядке, в котором мы хотим. Таким образом, основная идея класса Chain заключается в создании стека функций и выполнии их в нужном порядке, когда это потребуется.
<h3>Демонстрация</h3>
Смотреть <a href="/files/mootools-chain/">online-demo</a>.
<p style="text-align: right;">Эта статья - художественный перевод поста <a href="http://www.daniel-skinner.co.uk/chaining-with-mootools-12-tutorial/31/01/2008">Дэниэла Скиннера</a>.</p>
</body>
