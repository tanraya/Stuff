title: "Использование Zend_Form без декораторов"
tags:
- php
- zend-framework
- zend_form

<body>
<p>Лично мне использование декораторов в формах в <strong>Zend Framework</strong> никогда не нравилось, потому что это никогда не было для меня удобным. Каждый раз, когда приходилось добавлять дополнительные элементы и разметку в довольно сложную форму, это превращалось в великую головную боль.

Кроме того, я почему-то уверен, что использование декораторов в <em>Zend Form</em> это не лучшее решение. В настоящей действительности все чаще приходится работать с готовой <em>XHTML </em>разметкой, которую предоставляет верстальщик. В таком случае, программисту приходится "переводить" уже сверстанную форму в php-код. Разве это удобно, разве это способствует продуктивности? Никак нет. Просто делается лишняя работа, вместо того, чтобы подставить в нужные места формы вывод ошибок и прочего.

Но как сделать так, чтобы наша форма сохраняла функциональность валидаторов, "зашитых" в ней, и при этом мы могли бы визуально видеть разметку формы? Как ни странно, но в этом нам поможет декоратор!
~

В стандартной поставке Zend Form существует декоратор <strong>viewScript</strong>, он то нам и поможет. Наиболее простым решением будет создать новый класс, унаследованный от Zend Form. От этого нового класса мы будем наследовать все остальные классы форм, используемые в проекте.

Посмотрим на код:
</p>
<div class="gist-wrapper"><script src="https://gist.github.com/1768740.js?file=gistfile1.php"></script></div>
Это наиболее простой способ удобного использования декоратора. Теперь, в ваших классах форм вам достаточно вызывать метод <em>setTemplate()</em> с указанием имени шаблона для формы. Так же мы видим два переопределенных метода: <em>addElement()</em> и <em>createElement()</em>. Они создают и добавляют элементы в форму без декораторов по-умолчанию, чтобы элементы формы не были обернуты ненужными нам тегами. Конечно, можно автоматизировать выбор шаблона, чтобы вам не приходилось вручную указывать его. Я показал наиболее простой пример использования, выбор реализации остается за вами.

При таком подходе, для каждой формы используется отдельный шаблон. Давайте взглянем на то, как может выглядеть шаблон:
<div class="gist-wrapper"><script src="https://gist.github.com/1768742.js?file=gistfile1.html"></script></div>

Как мы видим, теперь все поля формы вставляются вручную. Теперь, у нас нет никаких декораторов. Радуемся :)

Я сейчас думаю над более комплексным решением для работы с формами под Zend Framework. Возможно, в моем решении пакет Zend Form вообще отпадёт за ненадобностью. Я сейчас использую Zend Form в основном для удобной валидации, так как все валидаторы на форму расположены в одном месте, в классе формы. Но я планирую делать валидацию в конечной точке пользовательского запроса - в модели. В этом случае, Zend Form мне уже не понадобится.

Программирование форм - это нудятина. Нам всем (веб-разработчикам) нужно искать средства избавления от нее :)

Надеюсь, было интересно :) Жду комментов.</body>
