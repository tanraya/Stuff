title: "Параллельная обработка запросов в Ruby"
tags:
- async
- multithreaded
- ruby

<body>
<p>В прошлой статье мы рассмотрели <a href="/useless-webserver-on-ruby-illustrates-get-request-processing/">создание простейшего веб-сервера и обработку GET-запросов</a>.

Но наш веб-сервер не может обрабатывать несколько соединений одновременно!  Если обратиться одновременно к серверу несколькими запросами, то они  встанут в очередь и будут ожидать завершения друг-друга, чтобы поступить  на обработку. Чтобы  обработка запросов выполнялась асинхронно, нужно  добавить в веб-сервер треды.

Что такое треды?
Треды - это программные потоки, которые  выполняются внутри одного процесса, они обеспечивают параллельное  выполнение кода. Это очень важно. Именно потому что треды выполняются  внутри одного процесса, расходуется меньше памяти, да и создать новый  тред и переключиться в него быстрее, чем создать новый процесс. Поэтому,  все современные веб-серверы и другие серверы используют в своей работе  треды.
Возможность создавать треды предоставляет нам операционная система,  поэтому, нужен низкоуровневый язык (например C), чтобы работать с  тредами. Однако, Ruby предоставляет нам интерфейс к тредам, поэтому, мы  можем использовать их и в Ruby.

Давайте добавим в веб-сервер парралельности, тогда он сможет  обрабатывать большее количество соединений за единицу времени. Я уберу  старые комментарии из кода и добавлю туда поддержку тредов.

</p>
<div class="gist-wrapper"><script src="https://gist.github.com/1768856.js?file=gistfile1.rb"></script></div>

Итак, мы получили парралельную обработку запросов и увидели, как  обрабатывается запрос.</body>
